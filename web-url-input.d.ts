/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   web-url-input.html
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/legacy/class.d.ts" />
/// <reference path="../paper-input/paper-input.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />
/// <reference path="../paper-autocomplete/paper-autocomplete.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../iron-overlay-behavior/iron-overlay-behavior.d.ts" />
/// <reference path="../paper-styles/shadow.d.ts" />

declare namespace UiElements {

  /**
   * An element to display a dialog to enter an URL with auto hints
   *
   * ### Example
   *
   * ```html
   * <web-url-input purpose="open-browser"></web-url-input>
   * ```
   *
   * ### Styling
   *
   * `<web-url-input>` provides the following custom properties and mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--web-url-input` | Mixin applied to the element | `{}`
   * `--web-url-input-background-color` | Background color of the element | `#fff`
   * `--web-url-input-input` | Mixin applied to the paper input element | `{}`
   * `--web-url-input-button` | Mixin applied to the paper button element | `{}`
   */
  class WebUrlInput extends
    Polymer.IronOverlayBehavior(
    Object) {

    /**
     * Current URL value.
     */
    value: string|null|undefined;

    /**
     * Input target for the `paper-autocomplete` element.
     */
    _autocompleteTarget: HTMLElement|null;

    /**
     * True when a suggestion box for the URL is opened.
     */
    suggesionsOpened: boolean|null|undefined;

    /**
     * A value to be set in the detail object of `open-web-url` custom event.
     * The editor can server different purposes. Re-set the purpose to inform
     * the application about purpose of the event.
     */
    purpose: string|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _autocompleteQuery(e: any): void;
    _makeQuery(q: any): void;
    _keyDownHandler(e: any): void;

    /**
     * A handler called when the user press "enter" in any of the form fields.
     * This will send an `open-web-url` event.
     */
    _onEnter(): void;
  }
}

interface HTMLElementTagNameMap {
  "web-url-input": UiElements.WebUrlInput;
}
